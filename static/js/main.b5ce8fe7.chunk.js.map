{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostComments/PostComments.jsx","components/PostDetails/PostDetails.jsx","components/UserSelect/UserSelect.jsx","App.jsx","index.js"],"names":["BASE_URL","request","requiredData","fetch","then","response","json","result","data","getUserPosts","userId","getUsers","users","filter","user","address","sort","a","b","id","getPostDetails","postId","Loader","className","PostsList","setSelectedPostId","selectedPostId","useState","posts","setPosts","fetchPosts","useCallback","postsFromServer","useEffect","length","map","post","key","title","type","onClick","undefined","defaultProps","getComments","createComment","method","headers","body","JSON","stringify","name","trim","email","deleteComment","NewCommentForm","setComments","inputs","setInputs","isFormValid","setIsFormValid","handleChange","value","prevInputs","handleSubmit","event","preventDefault","comments","onSubmit","placeholder","onChange","target","PostComments","handleClick","comment","postComments","PostDetails","setPost","isCommentsHide","setIsCommentsHide","fetchCommentsAndPosts","Promise","all","commentsFromServer","postFromServer","UserSelect","setUserId","setUsers","usersFromServer","fetchUsers","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5ce8fe7.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(requiredData) {\n  return fetch(`${BASE_URL}${requiredData}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","'use_strict';\n\nimport { request } from './api';\n\nexport const getUserPosts = (userId) => {\n  let postsFromServer;\n\n  if (!userId) {\n    postsFromServer = request('/posts');\n  } else {\n    postsFromServer = request(`/posts?userId=${userId}`);\n  }\n\n  return postsFromServer;\n};\n\nexport const getUsers = () => {\n  const usersFromServer = request('/users')\n    .then(users => users.filter(user => user.address !== null))\n    .then(users => users.sort((a, b) => a.id - b.id));\n\n  return usersFromServer;\n};\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList = ({ userId, setSelectedPostId, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n\n  const fetchPosts = useCallback(async() => {\n    const postsFromServer = await getUserPosts(userId);\n\n    setPosts(postsFromServer);\n  }, [userId]);\n\n  useEffect(() => {\n    fetchPosts();\n  }, [fetchPosts]);\n\n  const handleClick = (postId) => {\n    setSelectedPostId(postId === selectedPostId ? undefined : postId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {posts.length ? (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleClick(post.id)}\n              >\n                {`${selectedPostId === post.id ? 'Close' : 'Open'}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : <Loader />}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number,\n  selectedPostId: PropTypes.number,\n  setSelectedPostId: PropTypes.func.isRequired,\n};\n\nPostsList.defaultProps = {\n  selectedPostId: null,\n  userId: 0,\n};\n","'use_strict';\n\nimport { BASE_URL, request } from './api';\n\nexport const getComments = (postId) => {\n  const commentsFromServer = request(`/comments?postId=${postId}`);\n\n  return commentsFromServer;\n};\n\nexport const createComment = (postId, data) => (\n  fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Context-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify({\n      postId,\n      name: data.name.trim(),\n      email: data.email.trim(),\n      body: data.body.trim(),\n    }),\n  })\n);\n\nexport const deleteComment = postId => (\n  fetch(`${BASE_URL}/comments/${postId}`, {\n    method: 'DELETE',\n    headers: { 'Context-type': 'application/json; charset=UTF-8' },\n  })\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { createComment, getComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, setComments }) => {\n  const [inputs, setInputs] = useState({\n    name: '', email: '', body: '',\n  });\n  const [isFormValid, setIsFormValid] = useState(true);\n\n  const handleChange = ({ name, value }) => {\n    setInputs(prevInputs => ({\n      ...prevInputs, [name]: value,\n    }));\n    setIsFormValid(true);\n  };\n\n  const clearForm = () => {\n    setInputs({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const handleSubmit = async(event) => {\n    const { name, email, body } = inputs;\n\n    event.preventDefault();\n    if (name.trim().length > 0\n    && email.trim().length > 0\n    && body.trim().length > 0) {\n      await createComment(postId, inputs);\n      const comments = await getComments(postId);\n\n      setComments(comments);\n      clearForm();\n      setIsFormValid(true);\n    } else {\n      setIsFormValid(false);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className={isFormValid ? 'NewCommentForm' : 'NewCommentForm formRed'}\n        onSubmit={event => handleSubmit(event)}\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            value={inputs.name}\n            onChange={event => handleChange(event.target)}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            value={inputs.email}\n            onChange={event => handleChange(event.target)}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            value={inputs.body}\n            onChange={event => handleChange(event.target)}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n      {!isFormValid && (\n      <div className=\"alarm\">\n        <p>Please fill up all fields correctly</p>\n      </div>\n      )}\n    </>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment, getComments } from '../../api/comments';\n\nexport const PostComments = ({ comments, setComments, postId }) => {\n  const handleClick = async(comment) => {\n    await deleteComment(comment.id);\n    const postComments = await getComments(postId);\n\n    setComments(postComments);\n  };\n\n  return (\n    <>\n      {comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => {\n              handleClick(comment);\n            }}\n          >\n            X\n          </button>\n          <p>{comment.body}</p>\n        </li>\n      ))}\n    </>\n  );\n};\n\nPostComments.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({})),\n  postId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n\nPostComments.defaultProps = {\n  comments: [],\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { PostComments } from '../PostComments';\nimport { getPostDetails } from '../../api/posts';\nimport { getComments } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isCommentsHide, setIsCommentsHide] = useState(false);\n\n  const fetchCommentsAndPosts = useCallback(async() => {\n    const [commentsFromServer, postFromServer] = await Promise.all([\n      getComments(postId), getPostDetails(postId),\n    ]);\n\n    setComments(commentsFromServer);\n    setPost(postFromServer);\n  }, [postId]);\n\n  useEffect(() => {\n    fetchCommentsAndPosts();\n  }, [fetchCommentsAndPosts]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        {post.body ? <p>{post.body}</p> : <Loader />}\n      </section>\n\n      {comments.length > 0 ? (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setIsCommentsHide(!isCommentsHide);\n            }}\n          >\n            {`${isCommentsHide ? 'Show' : 'Hide'} ${comments.length} comments`}\n          </button>\n\n          <ul className=\"PostDetails__list\">\n            {!isCommentsHide && (\n            <PostComments\n              comments={comments}\n              postId={postId}\n              setComments={setComments}\n            />\n            )}\n          </ul>\n\n        </section>\n      ) : (<p>No comments yet</p>)}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            setComments={setComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number,\n};\n\nPostDetails.defaultProps = {\n  postId: null,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/posts';\n\nexport const UserSelect = ({ userId, setUserId }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    async function fetchUsers() {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    }\n\n    fetchUsers();\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n      <select\n        className=\"App__user-selector\"\n        value={userId}\n        onChange={(event) => {\n          setUserId(+event.target.value);\n        }}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(user => (\n          <option\n            key={user.id}\n            value={+user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  userId: PropTypes.number,\n  setUserId: PropTypes.func.isRequired,\n};\n\nUserSelect.defaultProps = {\n  userId: undefined,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App = () => {\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          userId={userId}\n          setUserId={setUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && (\n          <PostDetails\n            postId={selectedPostId}\n          />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}