{"version":3,"sources":["api/api.js","store/index.js","components/PostsList/PostsList.jsx","components/Loader/Loader.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","components/NewPost/NewPost.jsx","App.jsx","index.js"],"names":["createPost","title","body","fetch","method","headers","JSON","stringify","redirect","deletePost","postId","createComment","statePosts","state","posts","selectedPostId","initialState","getPosts","dispatch","then","response","json","type","setPosts","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","PostsList","useDispatch","useSelector","handleDelete","a","className","map","post","key","id","onClick","setPostId","Loader","NewCommentForm","selectedPost","useState","commentBody","setCommentBody","handleSubmit","event","preventDefault","trim","length","onSubmit","name","placeholder","value","onChange","target","disabled","PostDetails","setPost","postTitle","setPostTitle","postBody","setPostBody","isPostEditing","setIsPostEditing","loadPostDetails","useCallback","postFromServer","useEffect","NewPost","isFormValid","setIsFormValid","inputs","setInputs","handleChange","prevInputs","App","fetchPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d26595b.chunk.js","sourcesContent":["export function requestPosts() {\n  return fetch('https://bloggy-api.herokuapp.com/posts')\n    .then(response => response.json());\n}\n\nexport const createPost = ({ title, body }) => (\n  fetch(`https://bloggy-api.herokuapp.com/posts`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json' },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n    redirect: 'follow',\n  })\n);\n\nexport const deletePost = postId => (\n  fetch(`https://bloggy-api.herokuapp.com/posts/${postId}`, {\n    method: 'DELETE',\n    headers: { 'Content-type': 'application/json' },\n  }));\n\nexport const updatePost = (postId, title, body) => (\n  fetch(`https://bloggy-api.herokuapp.com/posts/${postId}`, {\n    method: 'PUT',\n    headers: { 'Content-type': 'application/json' },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n    redirect: 'follow',\n  })\n);\n\nexport function requestPostsById(postId) {\n  return fetch(`https://bloggy-api.herokuapp.com/posts/${postId}`)\n    .then(response => response.json());\n}\n\nexport function createComment(postId, body) {\n  if (postId === 0) {\n    return;\n  }\n\n  return (\n    fetch(`https://bloggy-api.herokuapp.com/comments`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        postId,\n        body,\n      }),\n    })\n  );\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { requestPosts } from '../api/api';\n\nconst SET_POSTS = 'SET_POSTS';\nconst SET_POST_ID = 'SET_POST_ID';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS, posts,\n});\nexport const setPostId = postId => ({\n  type: SET_POST_ID, postId,\n});\n\nexport const statePosts = state => state.posts;\nexport const selectedPostId = state => state.postId;\n\nconst initialState = {\n  posts: [],\n  postId: 0,\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: [...action.posts],\n      };\n\n    case SET_POST_ID:\n      return {\n        ...state,\n        postId: action.postId,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const getPosts = () => (dispatch) => {\n  requestPosts()\n    .then((posts) => {\n      dispatch(setPosts(posts));\n    });\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deletePost } from '../../api/api';\nimport { statePosts, setPostId, getPosts } from '../../store';\nimport './PostsList.scss';\n\nexport const PostsList = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(statePosts);\n\n  const handleClick = (postId) => {\n    dispatch(setPostId(postId));\n  };\n\n  const handleDelete = async(postId) => {\n    await deletePost(postId);\n    dispatch(getPosts());\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <div>\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[Post #${post.id}]: `}</b>\n                {post.title}\n              </div>\n              <div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id)}\n                >\n                  Show Details\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleDelete(post.id)}\n                >\n                  Delete Post\n                </button>\n              </div>\n\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport './NewCommentForm.scss';\nimport { createComment } from '../../api/api';\nimport { selectedPostId } from '../../store';\n\nexport const NewCommentForm = () => {\n  const selectedPost = useSelector(selectedPostId);\n  const [commentBody, setCommentBody] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n    if (commentBody.trim().length > 0) {\n      await createComment(selectedPost, commentBody);\n      setCommentBody('');\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={event => handleSubmit(event)}\n      >\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            value={commentBody}\n            onChange={event => setCommentBody(event.target.value)}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n          disabled={!(commentBody.trim().length > 0)}\n        >\n          Add a comment\n        </button>\n      </form>\n    </>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { requestPostsById, updatePost } from '../../api/api';\nimport './PostDetails.scss';\nimport { selectedPostId, getPosts } from '../../store';\nimport { NewCommentForm } from '../NewCommentForm';\n\nexport const PostDetails = () => {\n  const dispatch = useDispatch();\n  const selectedPost = useSelector(selectedPostId);\n  const [post, setPost] = useState({});\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n  const [isPostEditing, setIsPostEditing] = useState(false);\n\n  const loadPostDetails = useCallback(async() => {\n    const postFromServer = await requestPostsById(selectedPost);\n\n    setPost(postFromServer);\n    setPostTitle(postFromServer.title);\n    setPostBody(postFromServer.body);\n  }, [selectedPost]);\n\n  useEffect(() => {\n    loadPostDetails();\n  }, [loadPostDetails]);\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (postTitle.trim() && postBody.trim()) {\n      await updatePost(selectedPost, postTitle, postBody);\n      setIsPostEditing(false);\n      dispatch(getPosts());\n      loadPostDetails();\n    } else {\n      setIsPostEditing(false);\n    }\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {!isPostEditing\n        ? (\n          <section className=\"PostDetails__post\">\n            <h3><em>{post.title}</em></h3>\n            {post.body ? <p>{post.body}</p> : <Loader />}\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsPostEditing(true)}\n            >\n              Edit post\n            </button>\n          </section>\n        )\n        : (\n          <form\n            className=\"NewCommentForm\"\n            onSubmit={event => handleSubmit(event)}\n          >\n\n            <div className=\"form-field\">\n              <input\n                name=\"title\"\n                placeholder=\"Type titlr here\"\n                className=\"NewCommentForm__input\"\n                value={postTitle}\n                onChange={event => setPostTitle(event.target.value)}\n              />\n            </div>\n\n            <div className=\"form-field\">\n              <textarea\n                name=\"body\"\n                placeholder=\"Type post here\"\n                className=\"NewCommentForm__input\"\n                value={postBody}\n                onChange={event => setPostBody(event.target.value)}\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"NewCommentForm__submit-button button\"\n            >\n              Update post\n            </button>\n          </form>\n        )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getPosts } from '../../store';\n\nimport { createPost } from '../../api/api';\nimport '../NewCommentForm/NewCommentForm.scss';\n\nexport const NewPost = () => {\n  const dispatch = useDispatch();\n  const [isFormValid, setIsFormValid] = useState(true);\n  const [inputs, setInputs] = useState({\n    title: '', body: '',\n  });\n\n  const handleChange = ({ name, value }) => {\n    setInputs(prevInputs => ({\n      ...prevInputs, [name]: value,\n    }));\n    setIsFormValid(true);\n  };\n\n  const clearForm = () => {\n    setInputs({\n      title: '',\n      body: '',\n    });\n  };\n\n  const handleSubmit = async(event) => {\n    const { title, body } = inputs;\n\n    event.preventDefault();\n\n    if (title.trim().length > 0\n    && body.trim().length > 0) {\n      await createPost(inputs);\n      clearForm();\n      setIsFormValid(true);\n      dispatch(getPosts());\n    } else {\n      setIsFormValid(false);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={event => handleSubmit(event)}\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Post title\"\n            className=\"NewCommentForm__input\"\n            value={inputs.title}\n            onChange={event => handleChange(event.target)}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type post here\"\n            className=\"NewCommentForm__input\"\n            value={inputs.body}\n            onChange={event => handleChange(event.target)}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add new post\n        </button>\n      </form>\n\n      {!isFormValid && (\n      <div className=\"alarm\">\n        <p>Fields should not be empty</p>\n      </div>\n      )}\n\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { NewPost } from './components/NewPost';\nimport { getPosts, selectedPostId } from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const selectedPost = useSelector(selectedPostId);\n\n  function fetchPosts() {\n    dispatch(getPosts());\n  }\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header App__form-wrapper\">\n        <NewPost />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        {!!selectedPost && (\n        <div className=\"App__content\">\n          <PostDetails\n            postId={selectedPost}\n            fetchPosts={fetchPosts}\n          />\n        </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}